import React, {useContext} from 'react';import {AppContext} from "../../../context/app.context";import { MenuItem, PageItem} from "../../../interfaces/menu.interface";import styles from './Menu.module.css';import cn from "classnames";import Link from 'next/link';import {useRouter} from "next/router";import {firstLevelMenu} from "../../../helpers/helpers";const Menu = (): JSX.Element => {    const {menu, firstCategory,setMenu} = useContext(AppContext);    const router = useRouter();    const openSecondLevelMenu = (secondCategory:string) => {        setMenu && setMenu(menu.map(m=>{            if(m._id.secondCategory == secondCategory){                m.isOpened = !m.isOpened;            }            return m;        }));    };    const buildFirstLevelMenu = () => {        return (            <>                {firstLevelMenu.map((item) => (                    <div key={item.route}>                        <Link href={`/${item.route}`}><a>                            <div className={cn(styles.firstLevel, {                                [styles.firstLevelActive]: item.id == firstCategory                            })}>                                {item.icon}                                <span>{item.name}</span>                            </div>                        </a></Link>                        {item.id == firstCategory && buildSecondLevelMenu(menu, item.route)}                    </div>                ))}            </>        );    };    const buildSecondLevelMenu = (menuItem: MenuItem[], route: string) => {        return (            <div className={styles.secondBlock}>                {menuItem.map(m => {                    if(m.pages.map(p=>p.alias).includes(router.asPath.split('/')[2])){                        m.isOpened = true;                    }                    return (                        <div key={m._id.secondCategory}>                            <div className={styles.secondLevel} onClick={()=>openSecondLevelMenu(m._id.secondCategory)}>                                {m._id.secondCategory}                            </div>                            <div className={cn(styles.secondLevelBlock, {                                [styles.secondLevelBlockOpened]: m.isOpened                            })}>                                {buildThirdLevelMenu(m.pages, route)}                            </div>                        </div>                    );                })}            </div>        );    };    const buildThirdLevelMenu = (pages: PageItem[], route: string) => {        return (            <>                {pages.map(p => (                    <Link href={`/${route}/${p.alias}`} key={p._id}><a className={cn(styles.thirdLevel, {                        [styles.thirdLevelActive]: router.asPath == `/${route}/${p.alias}`                    })}>                        {p.category}                    </a></Link>                ))}            </>        );    };    return (        <div className={styles.menu}>            {buildFirstLevelMenu()}        </div>    );};export default Menu;