import React, {useContext,KeyboardEvent} from 'react';import {AppContext} from "../../../context/app.context";import { MenuItem, PageItem} from "../../../interfaces/menu.interface";import styles from './Menu.module.css';import cn from "classnames";import Link from 'next/link';import {useRouter} from "next/router";import {firstLevelMenu} from "../../../helpers/helpers";import {motion} from 'framer-motion';const Menu = (): JSX.Element => {    const {menu, firstCategory,setMenu} = useContext(AppContext);    const router = useRouter();    const variants = {        visible:{            marginBottom: 20,            transition:{when:'beforeChildren', staggerChildren:0.1}        },        hidden:{marginBottom:0}    };    const variantsChildren = {        visible:{            opacity:1,            height:29        },        hidden:{opacity:0,height:0}    };    const openSecondLevelKey = (key:KeyboardEvent,category:string)=> {        if(key.code == 'Space' || key.code == 'Enter'){            key.preventDefault();            openSecondLevelMenu(category);        }        return    };    const openSecondLevelMenu = (secondCategory:string) => {        setMenu && setMenu(menu.map(m=>{            if(m._id.secondCategory == secondCategory){                m.isOpened = !m.isOpened;            }            return m;        }));    };    const buildFirstLevelMenu = () => {        return (            <>                {firstLevelMenu.map((item) => (                    <div key={item.route}>                        <Link href={`/${item.route}`}><a>                            <div className={cn(styles.firstLevel, {                                [styles.firstLevelActive]: item.id == firstCategory                            })}>                                {item.icon}                                <span>{item.name}</span>                            </div>                        </a></Link>                        {item.id == firstCategory && buildSecondLevelMenu(menu, item.route)}                    </div>                ))}            </>        );    };    const buildSecondLevelMenu = (menuItem: MenuItem[], route: string) => {        return (            <div className={styles.secondBlock}>                {menuItem.map(m => {                    if(m.pages.map(p=>p.alias).includes(router.asPath.split('/')[2])){                        m.isOpened = true;                    }                    return (                        <div  key={m._id.secondCategory}>                            <div tabIndex={0}                                 onKeyDown={(key:KeyboardEvent)=>openSecondLevelKey(key,m._id.secondCategory)}                                 className={styles.secondLevel}                                 onClick={()=>openSecondLevelMenu(m._id.secondCategory)}>                                {m._id.secondCategory}                            </div>                            <motion.div                                layout                                variants={variants}                                initial={m.isOpened ? 'visible': 'hidden'}                                animate={m.isOpened ? 'visible': 'hidden'}                                className={cn(styles.secondLevelBlock)}>                                {buildThirdLevelMenu(m.pages, route,m.isOpened ?? false)}                            </motion.div>                        </div>                    );                })}            </div>        );    };    const buildThirdLevelMenu = (pages: PageItem[], route: string,isOpened:boolean) => {        return (                pages.map(p => (                    <motion.div key={p._id}                        variants={variantsChildren}                    >                        <Link href={`/${route}/${p.alias}`} ><a tabIndex={!isOpened ? -1 : 0} className={cn(styles.thirdLevel, {                            [styles.thirdLevelActive]: router.asPath == `/${route}/${p.alias}`                        })}>                            {p.category}                        </a></Link>                    </motion.div>                ))        );    };    return (        <div className={styles.menu}>            {buildFirstLevelMenu()}        </div>    );};export default Menu;