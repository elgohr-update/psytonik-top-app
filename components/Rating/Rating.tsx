import React, {useEffect, useState, KeyboardEvent, forwardRef, ForwardedRef} from 'react';import {RatingProps} from "./Rating.props";import StarIcon from './star.svg';import cn from "classnames";import styles from './Rating.module.css';const Rating =    forwardRef(({isEditable = false, rating, setRating,error, ...otherProps}:RatingProps,ref:ForwardedRef<HTMLDivElement>): JSX.Element => {    const [ratingArray,setRatingArray] = useState<JSX.Element[]>(new Array(5).fill(<></>));    useEffect(() =>{        constructRating(rating);    },[rating]);    const changeDisplay = (ind: number) => {        if(!isEditable){            return;        }        return constructRating(ind);    };    const onClick = (number: number) => {        if(!isEditable || !setRating){            return;        }        return setRating(number);    };    const handleSpace = (i:number,e:KeyboardEvent) => {        if(e.code != 'Space' || !setRating){            return;        }        return setRating(i);    };    const constructRating = (currentRating: number) => {        const updatedArray = ratingArray.map((r:JSX.Element,index:number) => {            return (                <span                    className={cn(styles.star,{                        [styles.filled]: index < currentRating,                        [styles.editable]: isEditable                    })}                    onMouseEnter={()=>changeDisplay(index+1)}                    onMouseLeave={()=>changeDisplay(rating)}                    onClick={()=>onClick(index+1)}                >                    <StarIcon                        tabIndex={isEditable ? 0: -1}                        onKeyDown={(e:KeyboardEvent<SVGElement>)=> isEditable && handleSpace(index+1,e)}                    />                </span>            );        });        setRatingArray(updatedArray);    };    return (        <div {...otherProps} ref={ref} className={cn(styles.ratingWrapper,{            [styles.error]:error        })}>            {ratingArray.map((rat,index)=>                <span key={index+1}>                    {rat}                </span>)            }            {error && <span className={styles.errorMessage}>{error.message}</span>}        </div>    );});export default Rating;